
/*
 * Filename: sc_clock_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */

#ifndef _H_DEFINE_SC_CLOCK_TYPE
#define _H_DEFINE_SC_CLOCK_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_CLOCK_INCLUDES */
#include "tft.h"
#include "clock_statemachine_cfg.h"
#include "clock_statemachine.h"
/* USER CODE END SC_CLOCK_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_CLOCK signal    
 **********************************************************************/

/* USER CODE START SC_CLOCK_USERDEFINITIONS */

/*
 * @brief enumeration for active widget
 */
typedef enum
{
    CLOCK_NONE,         /**< \brief No Widget. */
    CLOCK_HOURWIDGET,   /**< \brief Hour Widget. */
    CLOCK_MINWIDGET,    /**< \brief Minute Widget. */
} CLOCK_active_widget_t;

/*
 * @brief data type for clock font
 */
typedef struct
{
    TFT_colors_t    foreground; /**< \brief foreground color. */
    TFT_colors_t    background; /**< \brief background color. */
} CLOCK_font_t;

/*
 * @brief data type for clock widget
 */
typedef struct
{
    CLOCK_State_t                           m_state;        /**< \brief Widget state. */
    STATE_stateInnerTransitionTable_t*      m_transitions;  /**< \brief pointer to the widget transition table. */
    STATE_stateAction_t*					m_stateActions; /**< \brief pointer to the state action table. */
    uint16_t                                m_value;        /**< \brief value associated with the widget. */
    CLOCK_font_t                            m_font;         /**< \brief font of the widget. */
} CLOCK_widget_t;

/* USER CODE END SC_CLOCK_USERDEFINITIONS */

typedef 
/* USER CODE START SC_CLOCK_SIGNALDATADEFINITION */
struct
{
	CLOCK_State_t                           m_containerState;   /**< \brief Container state. */
    STATE_stateOuterTransitionTable_t*		m_transitions;      /**< \brief pointer to the widget transition table. */
    STATE_ActionPtr_t*                      m_stateActions;     /**< \brief pointer to the state action table. */
    CLOCK_active_widget_t                   m_activeWidget;     /**< \brief current active widget. */
    CLOCK_widget_t                          m_hours;            /**< \brief hour widget. */
    CLOCK_widget_t                          m_minutes;          /**< \brief minute widget. */
} 
/* USER CODE END SC_CLOCK_SIGNALDATADEFINITION */
SC_CLOCK_data_t;

/* USER CODE START InitSC_CLOCK */
#define SC_CLOCK_INIT_DATA  ((SC_CLOCK_data_t)  {STATE_CLOCK_C_ISDISPLAYING, 0, 0, CLOCK_NONE, {STATE_CLOCK_W_ISDISPLAYING, 0, 0, 0, {WHITE, BLACK}},  {STATE_CLOCK_W_ISDISPLAYING, 0, 0, 0, {WHITE, BLACK}}})
/* USER CODE END InitSC_CLOCK */




/**
 * Default OUT driver API
 * \param const SC_CLOCK_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_CLOCK_driverOut(const SC_CLOCK_data_t  *const data);


/* USER CODE START SC_CLOCK_USERFUNCTIONS */

/* USER CODE END SC_CLOCK_USERFUNCTIONS */


#endif